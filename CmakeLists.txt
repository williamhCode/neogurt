cmake_minimum_required(VERSION 3.5...3.28)

project(
  Neogurt
  VERSION 0.1.0
  LANGUAGES C CXX
)

# fix https://gitlab.kitware.com/cmake/cmake/-/issues/24104
enable_language(OBJC) 

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)  # clangd

# deps ---------------------------
add_subdirectory(deps/webgpu_tools)

set(MSGPACK_USE_STATIC_BOOST ON)
add_subdirectory(deps/msgpack)

add_subdirectory(deps/freetype)

set(UTFCPP_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/deps/utfcpp/source)

# temp fix for https://github.com/blend2d/blend2d/issues/216
set(BLEND2D_NO_JIT OFF)
add_subdirectory(deps/blend2d)

# neogurt target -------------------------
set(APP_SRC
	src/main.cpp

  src/app/sdl_window.cpp
  src/app/sdl_event.cpp
  src/app/input.cpp
  src/app/size.cpp
  src/app/window_funcs.mm
  src/app/options.cpp
  src/app/path.cpp

  src/editor/state.cpp
  src/editor/cursor.cpp
  src/editor/grid.cpp
  src/editor/window.cpp
  src/editor/highlight.cpp
  src/editor/font.cpp

  src/gfx/context.cpp
  src/gfx/pipeline.cpp
  src/gfx/renderer.cpp
  src/gfx/font.cpp
  src/gfx/pen.cpp
  src/gfx/box_drawing.cpp
  src/gfx/camera.cpp
  src/gfx/render_texture.cpp
  src/gfx/texture_atlas.cpp
  src/gfx/font/locator.mm

  src/nvim/nvim.cpp
  src/nvim/msgpack_rpc/client.cpp
  src/nvim/events/ui.cpp
  src/nvim/events/user.cpp

  # src/session/process.cpp
  src/session/manager.cpp

  src/utils/unicode.cpp
  src/utils/clock.cpp
  src/utils/logger.cpp
  src/utils/timer.cpp
  src/utils/color.cpp
)

add_executable(neogurt ${APP_SRC})

target_compile_definitions(neogurt PRIVATE
  ROOT_DIR="${PROJECT_SOURCE_DIR}"
)

target_include_directories(neogurt PRIVATE 
  ${PROJECT_SOURCE_DIR}/src
  ${UTFCPP_INCLUDE_DIR}
)

target_link_libraries(neogurt PRIVATE 
  webgpu_tools
  msgpack-cxx
  freetype
  blend2d::blend2d
)

if (MSVC)
  target_compile_options(neogurt PRIVATE /W4)
else()
  target_compile_options(neogurt PRIVATE
    -Wall -Wextra -Wshadow -pedantic 
    -Wno-missing-field-initializers
    -Wno-deprecated-declarations
    # jthread clang 18
    -fexperimental-library
    -Wno-error=narrowing
  )

  # if debug mode
  # if (CMAKE_BUILD_TYPE MATCHES Debug)
  #   target_compile_options(neogurt PRIVATE
  #     -fsanitize=address
  #   )
  #   target_link_options(neogurt PRIVATE
  #     -fsanitize=address
  #   )
  # endif()

  # assert in release
  # target_compile_options(neogurt PRIVATE -UNDEBUG)
endif()

# if no LLVM_PATH env var, then set LLVM_PATH to $(brew --prefix llvm)

if (NOT DEFINED ENV{LLVM_PATH})
  execute_process(COMMAND brew --prefix llvm OUTPUT_VARIABLE LLVM_PATH OUTPUT_STRIP_TRAILING_WHITESPACE)
  set(ENV{LLVM_PATH} ${LLVM_PATH})
endif()

if (XCODE)
  target_compile_definitions(neogurt PRIVATE
    XCODE=1
  )
  set_target_properties(neogurt PROPERTIES
    XCODE_GENERATE_SCHEME ON
    XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE "Metal"
    XCODE_SCHEME_ENVIRONMENT
    "PATH=$ENV{PATH};DAWN_DEBUG_BREAK_ON_ERROR=1"
    XCODE_SCHEME_ADDRESS_SANITIZER ON
    XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER ON
  )
  set(CMAKE_XCODE_ATTRIBUTE_OTHER_CODE_SIGN_FLAGS "-o linker-signed")
endif()

# https://github.com/llvm/llvm-project/issues/77653
# stack unwinding breaking and linking breaks without this
target_link_libraries(neogurt PRIVATE 
  "-L$ENV{LLVM_PATH}/lib/c++ -L$ENV{LLVM_PATH}/lib/unwind -lunwind"
)
